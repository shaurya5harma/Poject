#include <iostream>
#include <map>
#include <string>
#include <vector>
#include <set>
#include <limits>
#include <algorithm>

using namespace std;

class Graph
{
public:
    map<string, map<string, int>> adj;

    void addEdge(const string &u, const string &v, int w)
    {
        adj[u][v] = w;
        adj[v][u] = w; // Assuming the graph is undirected
    }

    pair<vector<string>, int> shortestPath(const string &start, const string &end)
    {
        map<string, int> distances;
        map<string, string> previous;
        set<pair<int, string>> nodes;

        for (const auto &pair : adj)
        {
            if (pair.first == start)
            {
                distances[pair.first] = 0;
            }
            else
            {
                distances[pair.first] = numeric_limits<int>::max();
            }
            nodes.insert({distances[pair.first], pair.first});
        }

        while (!nodes.empty())
        {
            auto smallest = *(nodes.begin());
            nodes.erase(nodes.begin());

            if (smallest.second == end)
            {
                vector<string> path;
                int cost = distances[end];
                while (previous.find(smallest.second) != previous.end())
                {
                    path.push_back(smallest.second);
                    smallest.second = previous[smallest.second];
                }
                path.push_back(start);
                reverse(path.begin(), path.end());
                return {path, cost};
            }

            if (distances[smallest.second] == numeric_limits<int>::max())
            {
                break;
            }

            for (const auto &neighbor : adj[smallest.second])
            {
                int alt = distances[smallest.second] + neighbor.second;
                if (alt < distances[neighbor.first])
                {
                    nodes.erase({distances[neighbor.first], neighbor.first});
                    distances[neighbor.first] = alt;
                    previous[neighbor.first] = smallest.second;
                    nodes.insert({distances[neighbor.first], neighbor.first});
                }
            }
        }

        return {{}, 0}; // Return empty path and zero cost if there's no path from start to end
    }
};

int main()
{
    Graph graph;
    // This data is taken from the internet
    graph.addEdge("Noida Sector 62~B", "Botanical Garden~B", 8);
    graph.addEdge("Botanical Garden~B", "Yamuna Bank~B", 10);
    graph.addEdge("Yamuna Bank~B", "Vaishali~B", 8);
    graph.addEdge("Yamuna Bank~B", "Rajiv Chowk~BY", 6);
    graph.addEdge("Rajiv Chowk~BY", "Moti Nagar~B", 9);
    graph.addEdge("Moti Nagar~B", "Janak Puri West~BO", 7);
    graph.addEdge("Janak Puri West~BO", "Dwarka Sector 21~B", 6);
    graph.addEdge("Huda City Center~Y", "Saket~Y", 15);
    graph.addEdge("Saket~Y", "AIIMS~Y", 6);
    graph.addEdge("AIIMS~Y", "Rajiv Chowk~BY", 7);
    graph.addEdge("Rajiv Chowk~BY", "New Delhi~YO", 1);
    graph.addEdge("New Delhi~YO", "Chandni Chowk~Y", 2);
    graph.addEdge("Chandni Chowk~Y", "Vishwavidyalaya~Y", 5);
    graph.addEdge("New Delhi~YO", "Shivaji Stadium~O", 2);
    graph.addEdge("Shivaji Stadium~O", "DDS Campus~O", 7);
    graph.addEdge("DDS Campus~O", "IGI Airport~O", 8);
    graph.addEdge("Moti Nagar~B", "Rajouri Garden~BP", 2);
    graph.addEdge("Punjabi Bagh West~P", "Rajouri Garden~BP", 2);
    graph.addEdge("Punjabi Bagh West~P", "Netaji Subhash Place~PR", 3);

    string start = "Yamuna Bank~B";
    string end = "AIIMS~Y";

    auto result = graph.shortestPath(start, end);
    vector<string> path = result.first;
    int cost = result.second;

    if (path.empty())
    {
        cout << "No path found from " << start << " to " << end << "." << endl;
    }
    else
    {
        cout << "Shortest path from " << start << " to " << end << " is: " << endl;
        for (size_t i = 0; i < path.size(); ++i)
        {
            cout << path[i];
            if (i < path.size() - 1)
            {
                cout << " > ";
            }
        }
        cout << endl;
        cout << "Total cost: " << cost << endl;
    }

    return 0;
}
