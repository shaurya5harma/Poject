#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <ctime>
#include <algorithm>
#include <sstream>
#include <cctype>

using namespace std;

bool run;

int countLines(const vector<string>& words) {
    return words.size();
}

string getWord() {
    ifstream words_file("words.txt");
    if (!words_file) {
        cerr << "Error opening words file" << endl;
        run = false;
        return "";
    }

    vector<string> words;
    string line;
    while (getline(words_file, line)) {
        words.push_back(line);
    }

    srand(time(NULL));
    int number_of_words = countLines(words);

    return words.at(rand() % number_of_words);
}

string runAI() {
    return getWord();
}

void endGame() {
    cout << "Thank you for playing. Goodbye!" << endl;
    run = false;
}

string updateWord(const string& word, const vector<int>& characterLocations, char to_update) {
    string updated_word = word;
    for (int loc : characterLocations) {
        updated_word[loc] = to_update;
    }
    return updated_word;
}

bool hasOnlyAlpha(const string& word) {
    return all_of(word.begin(), word.end(), ::isalpha);
}

vector<int> findLocation(const string& sample, char findIt) {
    vector<int> characterLocations;
    for (int i = 0; i < sample.size(); ++i) {
        if (sample[i] == findIt) {
            characterLocations.push_back(i);
        }
    }
    return characterLocations;
}

void toLower(string& word) {
    transform(word.begin(), word.end(), word.begin(), ::tolower);
}

int main() {
    cout << "Welcome to Hangman!" << endl;

    run = true;

    while (run) {
        string gameMode;
        cout << "Would you like to play against:\n 1) A friend\n 2) The computer?" << endl;
        cout << "Type 'quit' to end the game." << endl;
        cin >> gameMode;

        if (gameMode == "quit") {
            run = false;
            continue;
        }

        string hidden_word, input;
        if (gameMode == "1") {
            bool isValidWord = false;
            cout << "=========PLAYER 1'S TURN=========" << endl;
            while (!isValidWord) {
                cout << "Give me a word: ";
                cin >> input;
                isValidWord = hasOnlyAlpha(input);
                if (isValidWord) {
                    cout << string(100, '\n'); // Clears the terminal
                    break;
                }
                cout << "Only letters are allowed in words." << endl;
            }

            hidden_word = string(input.length(), '_');
            toLower(input);
            cout << "=========PLAYER 2'S TURN=========" << endl;

            int num_tries = input.length() + 1;
            cout << "The word that your friend gave was " << input.length() << " letters long." << endl;
            cout << "Updated Word: " << hidden_word << endl;

            bool game_over = false;
            while (num_tries > 0 && !game_over) {
                char letter;
                cout << "Number of tries left: " << num_tries << endl;
                cout << "Give me a letter you think is in the word: ";
                cin >> letter;

                toLower(letter);

                if (input.find(letter) != string::npos) {
                    cout << "That letter is in the word!" << endl;
                    vector<int> characterLocations = findLocation(input, letter);
                    hidden_word = updateWord(hidden_word, characterLocations, letter);
                    if (hidden_word == input) {
                        game_over = true;
                        break;
                    }
                    cout << "Updated Word: " << hidden_word << endl;
                } else {
                    cout << "That letter is not in the word." << endl;
                }

                num_tries--;
            }

            cout << (num_tries > 0 ? "Player 2 wins!" : "Player 1 wins!") << endl;
            cout << "The word you gave was: " << input << endl;
            run = false;
        } else if (gameMode == "2") {
            input = runAI();
            hidden_word = string(input.length(), '_');

            cout << "=========PLAYER 2'S TURN=========" << endl;

            int num_tries = input.length() + 1;
            bool game_over = false;
            while (num_tries > 0 && !game_over) {
                char letter;
                cout << "If you would like to guess the word, press 1." << endl;
                cout << "Number of tries left: " << num_tries << endl;
                cout << "Give me a letter you think is in the word: ";
                cin >> letter;

                if (letter == '1') {
                    string guess;
                    cout << "What is your guess?" << endl;
                    cin >> guess;
                    if (input == guess) {
                        cout << "You guessed the word right!" << endl;
                        num_tries = -1;
                        game_over = true;
                    }
                } else {
                    toLower(letter);
                    if (input.find(letter) != string::npos) {
                        cout << "That letter is in the word!" << endl;
                        vector<int> characterLocations = findLocation(input, letter);
                        hidden_word = updateWord(hidden_word, characterLocations, letter);
                        if (hidden_word == input) {
                            game_over = true;
                            break;
                        }
                        cout << "Updated Word: " << hidden_word << endl;
                    } else {
                        cout << "That letter is not in the word." << endl;
                    }

                    num_tries--;
                }
            }

            cout << (num_tries > 0 ? "You win!" : "The computer wins!") << endl;
            cout << "The word the computer gave was: " << input << endl;
            run = false;
        } else {
            cout << "Please input only 1, 2, or 'quit'." << endl;
        }
    }

    endGame();

    return 0;
}
